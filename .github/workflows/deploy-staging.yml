name: 🚀 Deploy to Staging Server

on:
  push:
    branches: [ staging ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy-staging:
    name: 📦 Deploy TAMAM Admin to Staging
    runs-on: ubuntu-latest
    
    environment:
      name: staging
      url: https://staging.tamam.shop/admin
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔐 Setup SSH Key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
      
      - name: 🔑 Add Server to Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.STAGING_SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: 🧪 Test SSH Connection
        run: |
          ssh -o ConnectTimeout=10 root@${{ secrets.STAGING_SERVER_IP }} "echo '✅ SSH connection successful to staging server'"
      
      - name: 🔙 Prepare Rollback Point
        run: |
          echo "Creating rollback point for staging deployment..."
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            cd /var/www &&
            if [ -d tamam_backup ]; then rm -rf tamam_backup; fi &&
            if [ -d tamam ]; then cp -r tamam tamam_backup; fi &&
            echo '✅ Rollback point created at /var/www/tamam_backup'
          "
      
      - name: 📦 Deploy Laravel Files
        run: |
          echo "🚀 Starting deployment to staging.tamam.shop..."
          echo "📍 Target: Staging Server (${{ secrets.STAGING_SERVER_IP }})"
          echo "🗄️ Database: Staging MySQL Cluster"
          echo "☁️ Storage: tamam-staging DigitalOcean Space"
          
          # Deploy core Laravel files with rsync
          rsync -avz --progress \
            --include='app/' --include='app/**' \
            --include='bootstrap/' --include='bootstrap/**' \
            --include='config/' --include='config/**' \
            --include='database/' --include='database/**' \
            --include='public/' --include='public/**' \
            --include='resources/' --include='resources/**' \
            --include='routes/' --include='routes/**' \
            --include='storage/' --include='storage/**' \
            --include='Modules/' --include='Modules/**' \
            --include='modules_statuses.json' \
            --include='vendor/' --include='vendor/**' \
            --include='artisan' \
            --include='composer.json' \
            --include='composer.lock' \
            --include='create-staging-env.sh' \
            --exclude='*' \
            ./ root@${{ secrets.STAGING_SERVER_IP }}:/var/www/tamam/
          
          echo "✅ Files deployed successfully to staging"
      
      - name: 🔧 Create Staging Environment
        run: |
          echo "Creating staging environment configuration..."
          echo "📋 Using Staging MySQL Cluster as per branch strategy"
          
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            cd /var/www/tamam &&
            
            # Create .env file with staging configuration
            echo 'APP_NAME=Laravel' > .env &&
            echo 'APP_ENV=staging' >> .env &&
            echo 'APP_KEY=base64:PMl05FDKUiHKrMNi7Z91lPgp8Zbv5z6OnPA42RuYdGw=' >> .env &&
            echo 'APP_DEBUG=false' >> .env &&
            echo 'APP_URL=https://staging.tamam.shop' >> .env &&
            echo '' >> .env &&
            echo 'LOG_CHANNEL=stack' >> .env &&
            echo 'LOG_DEPRECATIONS_CHANNEL=null' >> .env &&
            echo 'LOG_LEVEL=info' >> .env &&
            echo '' >> .env &&
            echo '# Staging Branch - Uses Staging MySQL Cluster (DigitalOcean)' >> .env &&
            echo 'DB_CONNECTION=mysql' >> .env &&
            echo 'DB_HOST=tamam-staging-db-do-user-19403128-0.j.db.ondigitalocean.com' >> .env &&
            echo 'DB_PORT=25060' >> .env &&
            echo 'DB_DATABASE=tamamdb_staging' >> .env &&
            echo 'DB_USERNAME=doadmin' >> .env &&
            echo 'DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}' >> .env &&
            echo '' >> .env &&
            echo 'BROADCAST_DRIVER=log' >> .env &&
            echo 'CACHE_DRIVER=file' >> .env &&
            echo 'FILESYSTEM_DRIVER=s3' >> .env &&
            echo 'QUEUE_CONNECTION=sync' >> .env &&
            echo 'SESSION_DRIVER=file' >> .env &&
            echo 'SESSION_LIFETIME=120' >> .env &&
            echo '' >> .env &&
            echo 'MEMCACHED_HOST=127.0.0.1' >> .env &&
            echo '' >> .env &&
            echo 'REDIS_HOST=127.0.0.1' >> .env &&
            echo 'REDIS_PASSWORD=null' >> .env &&
            echo 'REDIS_PORT=6379' >> .env &&
            echo '' >> .env &&
            echo '# Staging Mail Configuration' >> .env &&
            echo 'MAIL_MAILER=smtp' >> .env &&
            echo 'MAIL_HOST=mailhog' >> .env &&
            echo 'MAIL_PORT=1025' >> .env &&
            echo 'MAIL_USERNAME=null' >> .env &&
            echo 'MAIL_PASSWORD=null' >> .env &&
            echo 'MAIL_ENCRYPTION=null' >> .env &&
            echo 'MAIL_FROM_ADDRESS=noreply@staging.tamam.shop' >> .env &&
            echo 'MAIL_FROM_NAME=\"\${APP_NAME}\"' >> .env &&
            echo '' >> .env &&
            echo '# Staging DigitalOcean Spaces Configuration' >> .env &&
            echo 'AWS_ACCESS_KEY_ID=${{ secrets.STAGING_SPACES_KEY }}' >> .env &&
            echo 'AWS_SECRET_ACCESS_KEY=${{ secrets.STAGING_SPACES_SECRET }}' >> .env &&
            echo 'AWS_DEFAULT_REGION=fra1' >> .env &&
            echo 'AWS_BUCKET=tamam-staging' >> .env &&
            echo 'AWS_ENDPOINT=https://fra1.digitaloceanspaces.com' >> .env &&
            echo 'AWS_USE_PATH_STYLE_ENDPOINT=false' >> .env &&
            echo 'AWS_URL=https://tamam-staging.fra1.cdn.digitaloceanspaces.com' >> .env &&
            echo '' >> .env &&
            echo 'PUSHER_APP_ID=' >> .env &&
            echo 'PUSHER_APP_KEY=' >> .env &&
            echo 'PUSHER_APP_SECRET=' >> .env &&
            echo 'PUSHER_HOST=' >> .env &&
            echo 'PUSHER_PORT=443' >> .env &&
            echo 'PUSHER_SCHEME=https' >> .env &&
            echo 'PUSHER_APP_CLUSTER=mt1' >> .env &&
            echo '' >> .env &&
            echo 'VITE_APP_NAME=\"\${APP_NAME}\"' >> .env &&
            echo 'VITE_PUSHER_APP_KEY=\"\${PUSHER_APP_KEY}\"' >> .env &&
            echo 'VITE_PUSHER_HOST=\"\${PUSHER_HOST}\"' >> .env &&
            echo 'VITE_PUSHER_PORT=\"\${PUSHER_PORT}\"' >> .env &&
            echo 'VITE_PUSHER_SCHEME=\"\${PUSHER_SCHEME}\"' >> .env &&
            echo 'VITE_PUSHER_APP_CLUSTER=\"\${PUSHER_APP_CLUSTER}\"' >> .env &&
            
            echo '✅ Staging environment created with staging MySQL cluster'
          "
      
      - name: 🔧 Set File Permissions
        run: |
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            chown -R www-data:www-data /var/www/tamam &&
            chmod -R 755 /var/www/tamam &&
            chmod -R 775 /var/www/tamam/storage &&
            mkdir -p /var/www/tamam/bootstrap/cache &&
            chmod -R 775 /var/www/tamam/bootstrap/cache &&
            echo '✅ File permissions set correctly'
          "
      
      - name: 📚 Update Dependencies
        run: |
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            cd /var/www/tamam &&
            composer install --no-dev --optimize-autoloader --no-interaction &&
            echo '✅ Composer dependencies updated'
          "
      
      - name: 🧹 Clear Laravel Caches
        run: |
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            cd /var/www/tamam &&
            php artisan config:clear &&
            php artisan route:clear &&
            php artisan cache:clear &&
            php artisan view:clear &&
            echo '✅ Laravel caches cleared'
          "
      
      - name: 🧪 Verify Module Status
        run: |
          echo "Verifying module activation and status..."
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            cd /var/www/tamam &&
            if [ -f modules_statuses.json ]; then
              echo '✅ modules_statuses.json deployed successfully'
              echo 'Module status file contents:'
              cat modules_statuses.json
            else
              echo '⚠️ modules_statuses.json missing - creating default'
              echo '{\"Rental\": true}' > modules_statuses.json
            fi &&
            
            echo '' &&
            echo 'Laravel module list:' &&
            php artisan module:list &&
            echo '✅ Module verification completed'
          "
      
      - name: 🗄️ Database Migration Strategy
        run: |
          echo "Executing staging database migrations..."
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            cd /var/www/tamam &&
            
            # Show current migration status
            echo '📊 Current migration status:' &&
            php artisan migrate:status &&
            
            # Run pending migrations
            echo '🔄 Running pending migrations...' &&
            php artisan migrate --force &&
            
            # Run module seeders
            echo '🌱 Running module seeders...' &&
            php artisan db:seed --class=ModuleSeeder --force &&
            
            # Verify critical tables exist
            echo '🔍 Verifying critical database tables:' &&
            php artisan tinker --execute='
              echo \"Users table: \" . (Schema::hasTable(\"users\") ? \"✅\" : \"❌\");
              echo \"Modules table: \" . (Schema::hasTable(\"modules\") ? \"✅\" : \"❌\");
              echo \"Orders table: \" . (Schema::hasTable(\"orders\") ? \"✅\" : \"❌\");
            ' &&
            
            echo '✅ Database migrations and verification completed'
          "
      
      - name: 🔑 Generate App Key (if needed)
        run: |
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            cd /var/www/tamam &&
            if ! grep -q '^APP_KEY=base64:' .env; then 
              echo '🔑 Generating new application key...' &&
              php artisan key:generate --force &&
              echo '✅ Application key generated'
            else
              echo '✅ Application key already exists'
            fi
          "
      
      - name: 🔄 Restart Services
        run: |
          echo "Restarting staging server services..."
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            systemctl restart php8.3-fpm &&
            systemctl restart nginx &&
            echo '✅ Services restarted successfully'
          "
      
      - name: 🧪 Test Staging Deployment
        run: |
          echo "Testing staging deployment endpoints..."
          echo "Waiting for services to fully restart..."
          sleep 15
          
          # Function to test endpoints with detailed error reporting
          test_endpoint() {
            local url=$1
            local name=$2
            echo "Testing $name at $url..."
            local status=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 15 --max-time 30 "$url")
            echo "$name: HTTP $status"
            
            if [[ "$status" =~ ^(200|302)$ ]]; then
              echo "✅ $name responding correctly"
              return 0
            else
              echo "❌ $name failed (HTTP $status)"
              echo "Getting error details:"
              curl -s --connect-timeout 10 --max-time 30 "$url" | head -20
              return 1
            fi
          }
          
          # Test critical endpoints
          FAILURES=0
          test_endpoint "https://staging.tamam.shop/admin" "Admin Dashboard" || ((FAILURES++))
          test_endpoint "https://staging.tamam.shop/login/admin" "Admin Login" || ((FAILURES++))
          test_endpoint "https://staging.tamam.shop/admin/addon" "Addon Management" || ((FAILURES++))
          test_endpoint "https://staging.tamam.shop/admin/dashboard" "Dashboard Route" || ((FAILURES++))
          
          if [ $FAILURES -eq 0 ]; then
            echo "✅ All critical routes are responding correctly"
          else
            echo "❌ $FAILURES route(s) failed - checking server logs"
            ssh root@${{ secrets.STAGING_SERVER_IP }} "
              echo '🔍 Recent Laravel logs:' &&
              tail -50 /var/www/tamam/storage/logs/laravel.log &&
              echo '🔍 Recent PHP-FPM logs:' &&
              tail -20 /var/log/php8.3-fpm.log &&
              echo '🔍 Recent Nginx error logs:' &&
              tail -20 /var/log/nginx/error.log
            "
            exit 1
          fi
      
      - name: 📋 Monitor Staging System Status
        if: always()
        run: |
          echo "Checking staging system status..."
          ssh root@${{ secrets.STAGING_SERVER_IP }} "
            echo '🔍 Recent Laravel errors (if any):' &&
            tail -20 /var/www/tamam/storage/logs/laravel.log | grep -E '(ERROR|CRITICAL|EMERGENCY)' || echo 'No recent errors found' &&
            
            echo '' &&
            echo '🔍 PHP-FPM status:' &&
            systemctl status php8.3-fpm --no-pager -l | head -10 &&
            
            echo '' &&
            echo '🔍 Nginx status:' &&
            systemctl status nginx --no-pager -l | head -10 &&
            
            echo '' &&
            echo '🔍 Disk usage:' &&
            df -h /var/www &&
            
            echo '' &&
            echo '🔍 Memory usage:' &&
            free -h
          "
      
      - name: 📊 Staging Deployment Summary
        if: always()
        run: |
          echo ""
          echo "🎉 STAGING DEPLOYMENT COMPLETE!"
          echo "📍 Admin URL: https://staging.tamam.shop/admin"
          echo "📍 Login URL: https://staging.tamam.shop/login/admin"
          echo "🗄️ Database: Staging MySQL Cluster (tamam-staging-db-do-user-19403128-0.j.db.ondigitalocean.com)"
          echo "☁️ Storage: tamam-staging DigitalOcean Space"
          echo "⏰ Deployed at: $(date)"
          echo ""
          echo "🔍 Next Steps:"
          echo "  • Test all admin functionality thoroughly"
          echo "  • Verify database connectivity and operations"
          echo "  • Test module functionality (if applicable)"
          echo "  • Validate file uploads and storage"
          echo "  • Check all admin routes and permissions"
          echo ""
          echo "📋 If deployment successful, staging is ready for production promotion"